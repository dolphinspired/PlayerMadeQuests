local builder = require("spec/addon-builder")
local events = require("spec/events")
local game = require("spec/game-env")
local addon = builder:Build()
local compiler = addon.QuestScriptCompiler
local QuestLog, QuestStatus = addon.QuestLog, addon.QuestStatus
local QuestCatalog, QuestCatalogStatus = addon.QuestCatalog, addon.QuestCatalogStatus
local QuestArchive = addon.QuestArchive

local goodScript = [[
  quest:
    name: Test Quest
    description: I sure hope these tests pass!
  objectives:
    - kill 5 Chicken]]

local function addSection(script, name, content)
  return string.format("%s\n  %s:\n    %s", script, name, content)
end

describe("QuestActions", function()
  local quest, eventSpy
  setup(function()
    addon:Init()
    eventSpy = events:SpyOnEvents(addon.AppEvents)
  end)
  before_each(function()
    quest = compiler:Compile(goodScript)
    QuestLog:DeleteAll()
    QuestCatalog:DeleteAll()
    QuestArchive:DeleteAll()
    addon:Advance()
    eventSpy:Reset()
    game:ResetEnv(addon)
  end)
  describe("AcceptQuest", function()
    it("can save quest with status Active", function()
      addon:AcceptQuest(quest)

      local saved = QuestLog:FindByID(quest.questId)
      assert.not_nil(saved)
      assert.equals(QuestStatus.Active, saved.status)
    end)
    it("can start tracking quest objectives", function()
      addon:AcceptQuest(quest)

      local payload = eventSpy:GetPublishPayload("QuestTrackingStarted", 1)
      assert.same(quest, payload)
    end)
    it("can publish QuestStarted and QuestAccepted event", function()
      addon:AcceptQuest(quest)

      local payload = eventSpy:GetPublishPayload("QuestAccepted", 1)
      assert.same(quest, payload)

      payload = eventSpy:GetPublishPayload("QuestStarted", 1)
      assert.same(quest, payload)
    end)
    it("can reset objective progress", function()
      quest.objectives[1].progress = 3

      addon:AcceptQuest(quest)

      local saved = QuestLog:FindByID(quest.questId)
      assert.equals(0, saved.objectives[1].progress)
    end)
    describe("when quest has already been accepted", function()
      before_each(function()
        addon:AcceptQuest(quest)
        addon:Advance()
        eventSpy:Reset()
      end)
      it("can stop tracking the original quest before starting tracking again", function()
        addon:AcceptQuest(quest)

        local payload = eventSpy:GetPublishPayload("QuestTrackingStopped", 1)
        assert.equals(quest.questId, payload.questId)

        payload = eventSpy:GetPublishPayload("QuestTrackingStarted", 1)
        assert.equals(quest.questId, payload.questId)
      end)
    end)
    describe("when quest is in Catalog", function()
      before_each(function()
        local catalogItem = QuestCatalog:NewCatalogItem(quest)
        QuestCatalog:SaveWithStatus(catalogItem, QuestCatalogStatus.Invited)
      end)
      it("can update catalog status to Accepted", function()
        addon:AcceptQuest(quest)

        local catalogItem = QuestCatalog:FindByID(quest.questId)
        assert.equals(QuestCatalogStatus.Accepted, catalogItem.status)
      end)
    end)
    describe("when quest is in Archive", function()
      before_each(function()
        QuestArchive:Save(quest)
      end)
      it("can delete the quest from the archive", function()
        assert.is_not_nil(QuestArchive:FindByID(quest.questId))

        addon:AcceptQuest(quest)

        local archiveItem = QuestArchive:FindByID(quest.questId)
        assert.is_nil(archiveItem)
      end)
    end)
    describe("when quest has start conditions", function()
      before_each(function()
        local updatedScript = addSection(goodScript, "start", "target: Dwaggin")
        quest = compiler:Compile(updatedScript)
      end)
      describe("and the player meets them", function()
        before_each(function()
          game:SetPlayerTarget(addon, { name = "Dwaggin" })
        end)
        it("then the quest can be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertPublished("QuestAccepted", 1)
        end)
      end)
      describe("and the player does not meet them", function()
        it("then the quest cannot be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertNotPublished("QuestAccepted")
        end)
      end)
    end)
    describe("when quest has requirements", function()
      before_each(function()
        local updatedScript = addSection(goodScript, "required", "level: 5")
        quest = compiler:Compile(updatedScript)
      end)
      describe("and the player meets them", function()
        before_each(function()
          game:SetPlayerInfo(addon, { level = 60 })
        end)
        it("then the quest can be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertPublished("QuestAccepted", 1)
        end)
      end)
      describe("and the player does not meet them", function()
        before_each(function()
          game:SetPlayerInfo(addon, { level = 1 })
        end)
        it("then the quest cannot be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertNotPublished("QuestAccepted", 1)
        end)
      end)
    end)
    describe("when quest has recommendations", function()
      before_each(function()
        local updatedScript = addSection(goodScript, "recommended", "level: 5")
        quest = compiler:Compile(updatedScript)
      end)
      describe("and the player meets them", function()
        before_each(function()
          game:SetPlayerInfo(addon, { level = 60 })
        end)
        it("then the quest can be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertPublished("QuestAccepted", 1)
        end)
      end)
      describe("and the player does not meet them", function()
        before_each(function()
          game:SetPlayerInfo(addon, { level = 1 })
        end)
        it("then the quest cannot be accepted", function()
          addon:AcceptQuest(quest)

          eventSpy:AssertNotPublished("QuestAccepted")
        end)
        it("then the quest can be accepted if you ask nicely", function()
          addon:AcceptQuest(quest, true)

          eventSpy:AssertPublished("QuestAccepted", 1)
        end)
      end)
    end)
  end)
  describe("DeclineQuest", function()
    it("can publish QuestDeclined event", function()
      addon:DeclineQuest(quest)

      local payload = eventSpy:GetPublishPayload("QuestDeclined", 1)
      assert.same(quest, payload)
    end)
    describe("when quest is Invited in Catalog", function()
      before_each(function()
        local catalogItem = QuestCatalog:NewCatalogItem(quest)
        QuestCatalog:SaveWithStatus(catalogItem, QuestCatalogStatus.Invited)
      end)
      it("updates the catalog status to Declined", function()
        addon:DeclineQuest(quest)

        local catalogItem = QuestCatalog:FindByID(quest.questId)
        assert.equals(QuestCatalogStatus.Declined, catalogItem.status)
      end)
    end)
    describe("when quest is Accepted in Catalog", function()
      before_each(function()
        local catalogItem = QuestCatalog:NewCatalogItem(quest)
        QuestCatalog:SaveWithStatus(catalogItem, QuestCatalogStatus.Accepted)
      end)
      it("does not update the catalog status", function()
        addon:DeclineQuest(quest)

        local catalogItem = QuestCatalog:FindByID(quest.questId)
        assert.equals(QuestCatalogStatus.Accepted, catalogItem.status)
      end)
    end)
  end)
  describe("AbandonQuest", function()
    it("can save quest with Abandoned status", function()
      addon:AbandonQuest(quest, true)

      local saved = QuestLog:FindByID(quest.questId)
      assert.not_nil(saved)
      assert.equals(QuestStatus.Abandoned, saved.status)
    end)
    it("can stop tracking quest", function()
      addon.QuestEngine:StartTracking(quest)
      addon:Advance()
      eventSpy:Reset()

      addon:AbandonQuest(quest, true)

      local payload = eventSpy:GetPublishPayload("QuestTrackingStopped", 1)
      assert.same(quest, payload)
    end)
    it("can publish QuestAbandoned event", function()
      addon:AbandonQuest(quest, true)

      local payload = eventSpy:GetPublishPayload("QuestAbandoned", 1)
      assert.same(quest, payload)
    end)
  end)
  describe("CompleteQuest", function()
    before_each(function()
      -- Happy path: assumes the player has already "Finished" the quest
      QuestLog:SaveWithStatus(quest, QuestStatus.Finished)
    end)
    it("can save quest with Completed status", function()
      addon:CompleteQuest(quest)

      local saved = QuestLog:FindByID(quest.questId)
      assert.not_nil(saved)
      assert.equals(QuestStatus.Completed, saved.status)
    end)
    it("can stop tracking quest", function()
      addon.QuestEngine:StartTracking(quest)
      addon:Advance()
      eventSpy:Reset()

      addon:CompleteQuest(quest)

      local payload = eventSpy:GetPublishPayload("QuestTrackingStopped", 1)
      assert.same(quest, payload)
    end)
    it("can publish QuestCompleted event", function()
      addon:CompleteQuest(quest)

      local payload = eventSpy:GetPublishPayload("QuestCompleted", 1)
      assert.same(quest, payload)
    end)
    describe("and the quest is not in Finished status", function()
      before_each(function()
        addon:AbandonQuest(quest, true)
        addon:Advance()
        eventSpy:Reset()
      end)
      it("then the quest cannot be completed", function()
        assert.has_error(function() addon:CompleteQuest(quest) end)
      end)
    end)
    describe("when the quest has a completion objective", function()
      before_each(function()
        local updatedScript = addSection(goodScript, "complete", "target: Dwaggin")
        quest = compiler:Compile(updatedScript)
        QuestLog:SaveWithStatus(quest, QuestStatus.Finished)
      end)
      describe("and the player meets the objective", function()
        before_each(function()
          game:SetPlayerTarget(addon, { name = "Dwaggin" })
        end)
        it("then the quest can be completed", function()
          addon:CompleteQuest(quest)

          eventSpy:AssertPublished("QuestCompleted", 1)
        end)
      end)
      describe("and the player does not meet the objective", function()
        it("then the quest cannot be completed", function()
          addon:CompleteQuest(quest)

          eventSpy:AssertNotPublished("QuestCompleted")
        end)
      end)
    end)
  end)
  describe("RestartQuest", function()
    it("can save quest with status Active", function()
      addon:RestartQuest(quest, true)

      local saved = QuestLog:FindByID(quest.questId)
      assert.not_nil(saved)
      assert.equals(QuestStatus.Active, saved.status)
    end)
    it("can start tracking quest objectives", function()
      addon:RestartQuest(quest, true)

      local payload = eventSpy:GetPublishPayload("QuestTrackingStarted", 1)
      assert.same(quest, payload)
    end)
    it("can publish QuestRestarted and QuestAccepted event", function()
      addon:RestartQuest(quest, true)

      local payload = eventSpy:GetPublishPayload("QuestRestarted", 1)
      assert.same(quest, payload)

      payload = eventSpy:GetPublishPayload("QuestStarted", 1)
      assert.same(quest, payload)
    end)
    it("can reset objective progress", function()
      quest.objectives[1].progress = 3

      addon:RestartQuest(quest, true)

      local saved = QuestLog:FindByID(quest.questId)
      assert.equals(0, saved.objectives[1].progress)
    end)
    describe("when quest has already been accepted", function()
      before_each(function()
        addon:AcceptQuest(quest)
        addon:Advance()
        eventSpy:Reset()
      end)
      it("can stop tracking the original quest before starting tracking again", function()
        addon:RestartQuest(quest, true)

        local payload = eventSpy:GetPublishPayload("QuestTrackingStopped", 1)
        assert.equals(quest.questId, payload.questId)

        payload = eventSpy:GetPublishPayload("QuestTrackingStarted", 1)
        assert.equals(quest.questId, payload.questId)
      end)
    end)
    describe("when quest is in Catalog", function()
      before_each(function()
        local catalogItem = QuestCatalog:NewCatalogItem(quest)
        QuestCatalog:SaveWithStatus(catalogItem, QuestCatalogStatus.Invited)
      end)
      it("can update catalog status to Accepted", function()
        addon:RestartQuest(quest, true)

        local catalogItem = QuestCatalog:FindByID(quest.questId)
        assert.equals(QuestCatalogStatus.Accepted, catalogItem.status)
      end)
    end)
    describe("when quest is in Archive", function()
      before_each(function()
        QuestArchive:Save(quest)
      end)
      it("can delete the quest from the archive", function()
        assert.is_not_nil(QuestArchive:FindByID(quest.questId))

        addon:RestartQuest(quest, true)

        local archiveItem = QuestArchive:FindByID(quest.questId)
        assert.is_nil(archiveItem)
      end)
    end)
  end)
end)