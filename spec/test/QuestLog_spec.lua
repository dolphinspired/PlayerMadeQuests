local builder = require("spec/addon-builder")
local addon = builder:Build()
local events = require("spec/events")
local engine, compiler = addon.QuestEngine, addon.QuestScriptCompiler
local QuestLog, QuestStatus = addon.QuestLog, addon.QuestStatus

local goodScript = [[
  objectives:
    - kill 5 Chicken
    - talkto 3 "Stormwind Guard"
    - emote dance 2 Cow
]]

-- For testing: compiles a script with some default parameters
local function makeQuest(script)
  local params = {
    name = "Test Quest",
    description = "I sure hope these tests pass!"
  }
  return compiler:Compile(script, params)
end

describe("QuestLog", function()
  local quest, eventSpy, messageSpy
  setup(function()
    addon:Init()
    addon:Advance()
    eventSpy = events:SpyOnEvents(addon.AppEvents)
    messageSpy = events:SpyOnEvents(addon.MessageEvents)
  end)
  before_each(function()
    quest = makeQuest(goodScript)
    QuestLog:Clear()
    addon:Advance()
    eventSpy:Reset()
    messageSpy:Reset()
  end)
  it("can clear the log", function()
    QuestLog:AddQuest(quest, QuestStatus.Active)
    QuestLog:Clear()

    local results = QuestLog:FindAll()
    assert.equals(0, #results)

    addon:Advance()
    eventSpy:AssertPublished("QuestLogReset", 1)
  end)
  describe("AddQuest", function()
    it("can add a quest with a valid status", function()
      QuestLog:AddQuest(quest, QuestStatus.Active)

      local results = QuestLog:FindAll()
      assert.equals(1, #results)

      local result = QuestLog:FindByID(quest.questId)
      assert.same(result, quest)

      local payload = eventSpy:GetPublishPayload("QuestAdded", 1)
      assert.same(quest, payload)
    end)
    it("cannot add a quest without a status", function()
      assert.has_error(function() QuestLog:AddQuest(quest) end)
      eventSpy:AssertNotPublished("QuestAdded")
    end)
    it("cannot add a quest with an invalid status", function()
      assert.has_error(function() QuestLog:AddQuest(quest, "invalid") end)
      eventSpy:AssertNotPublished("QuestAdded")
    end)
    it("cannot add the same quest twice", function()
      QuestLog:AddQuest(quest, QuestStatus.Invited)
      assert.has_error(function() QuestLog:AddQuest(quest, QuestStatus.Active) end)
      eventSpy:AssertPublished("QuestAdded", 1)
    end)
  end)
  describe("SetQuestStatus", function()
    before_each(function()
      QuestLog:AddQuest(quest, QuestStatus.Invited)
      addon:Advance()
      eventSpy:Reset()
    end)
    it("can set quest status", function()
      QuestLog:SetQuestStatus(quest.questId, QuestStatus.Archived)
      local result = QuestLog:FindByID(quest.questId)
      assert.equals(QuestStatus.Archived, result.status)
    end)
    it("cannot set a non-existent quest", function()
      assert.has_error(function() QuestLog:SetQuestStatus("fake-id", QuestStatus.Archived) end)
      eventSpy:AssertNotPublished("QuestStatusChanged")
    end)
    it("cannot set when status is missing", function()
      assert.has_error(function() QuestLog:SetQuestStatus(quest.questId) end)
      eventSpy:AssertNotPublished("QuestStatusChanged")
    end)
    it("cannot set an invalid status", function()
      assert.has_error(function() QuestLog:SetQuestStatus(quest.questId, "invalid") end)
      eventSpy:AssertNotPublished("QuestStatusChanged")
    end)
    it("does not publish event on same status", function()
      QuestLog:SetQuestStatus(quest.questId, quest.status)
      eventSpy:AssertNotPublished("QuestStatusChanged")
    end)
    it("resets quest progress on status change", function()
      quest.objectives[1].progress = 1
      QuestLog:SetQuestStatus(quest.questId, QuestStatus.Active)
      assert.equals(0, quest.objectives[1].progress)
    end)
    it("publishes event on status change", function()
      QuestLog:SetQuestStatus(quest.questId, QuestStatus.Active)
      eventSpy:AssertPublished("QuestStatusChanged")
    end)
  end)
  describe("DeleteQuest", function()
    before_each(function()
      QuestLog:AddQuest(quest, QuestStatus.Invited)
      addon:Advance()
      eventSpy:Reset()
    end)
    it("can delete a quest", function()
      QuestLog:DeleteQuest(quest.questId)

      local results = QuestLog:FindAll()
      assert.equals(0, #results)

      local result = QuestLog:FindByID(quest.questId)
      assert.is_nil(result)

      local payload = eventSpy:GetPublishPayload("QuestDeleted")
      assert.same(quest, payload)
    end)
    it("does not error for non-existent id", function()
      QuestLog:DeleteQuest("fake-id")
      eventSpy:AssertNotPublished("QuestDeleted")
    end)
  end)
  describe("QuestInvite", function()
    it("can receive a QuestInvite message", function()
      addon.MessageEvents:Publish("QuestInvite", nil, quest)
      addon:Advance()
      local payload = eventSpy:GetPublishPayload("QuestInvite")
      assert.equals(quest.name, payload.name)
    end)
    it("can receive a duplicate quest in an 'Inactive' status", function()
      QuestLog:AddQuest(quest, QuestStatus.Declined)
      addon:Advance()
      addon.MessageEvents:Publish("QuestInvite", nil, quest)
      addon:Advance()
      eventSpy:AssertPublished("QuestInvite", 1)
    end)
    it("cannot receive a duplicate quest in an 'Active' status", function()
      QuestLog:AddQuest(quest, QuestStatus.Active)
      addon:Advance()
      addon.MessageEvents:Publish("QuestInvite", nil, quest)
      addon:Advance()
      eventSpy:AssertNotPublished("QuestInvite")
    end)
  end)
end)