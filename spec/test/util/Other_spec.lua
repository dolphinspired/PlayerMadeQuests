local mock = require("spec/mock")
local builder = require("spec/addon-builder")
local addon = builder:Build()

addon.Logger = mock:NewMock(addon.Logger)
local logSpy = mock:GetFunctionMock(addon.Logger.Log)

describe("Identifiers", function()
  it("can create different sequential ids", function()
    local id1, id2 = addon:CreateID(), addon:CreateID()
    assert.not_equals(id1, id2)
  end)
  it("can create IDs with format strings", function()
    local format = "test-id-%i"
    local id = addon:CreateID(format)
    assert.not_equals(id, format)
  end)
end)

describe("Logger", function()
  before_each(function()
    logSpy:Reset()
  end)
  it("can log", function()
    addon.Logger:Info("test log %s", "more stuff")
    logSpy:AssertCalled()
  end)
  it("can flush log buffer on init", function()
    local tempAddon = builder:Build()
    tempAddon.Logger:Debug("buffered log")
    assert.equals(0, tempAddon:GetLogStats()["*"].stats.received, "Expected no logs to be received before init")
    -- tempAddon:ForceLogs(function() tempAddon:Init() end)
    tempAddon:Init()
    assert.is_true(tempAddon:GetLogStats()["*"].stats.received > 0, "Expected logs to be flushed on init")
  end)
end)

describe("Sounds", function()
  local playSoundMock = mock:GetFunctionMock(addon.G.PlaySoundFile)

  before_each(function()
    logSpy:Reset()
    playSoundMock:Reset()
  end)

  it("can play a recognized sound", function()
    addon:PlaySound("QuestAccepted")
    playSoundMock:AssertCalled()
  end)
  it("warns when an unrecognized sound is requested", function()
    addon:PlaySound("literally whatever")
    logSpy:AssertCalled()
    playSoundMock:AssertNotCalled()
  end)
end)